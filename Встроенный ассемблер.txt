contest asm
;-------------------------------------------------------------------------------------------------------------------------------------------------
#1 - zero
	mov eax, 0
;-------------------------------------------------------------------------------------------------------------------------------------------------
#2 - one
	mov eax, 1
;-------------------------------------------------------------------------------------------------------------------------------------------------
#3 - next
	inc ax
;-------------------------------------------------------------------------------------------------------------------------------------------------
#4 - prev
	dec ax
;-------------------------------------------------------------------------------------------------------------------------------------------------
#5 - sum
	push ax
	add ax, bx
	mov dx, ax
	pop ax	
;-------------------------------------------------------------------------------------------------------------------------------------------------
#6 - sub
	push eax
	sub eax, ebx
	mov edx, eax
	pop eax
;-------------------------------------------------------------------------------------------------------------------------------------------------
#7 - imul
	imul bl
	mov dx, ax
;-------------------------------------------------------------------------------------------------------------------------------------------------
#8 - idiv
	cmp ax, 0
    jl metka1
    mov dx, 0
metka2:
    idiv bx
    mov dx, ax
    jmp metka3
metka1:
    mov dx, 0xFFFF
    jmp metka2
metka3:
;-------------------------------------------------------------------------------------------------------------------------------------------------
#9 - lea
	lea rdx, [rax + rbx * 8]
;-------------------------------------------------------------------------------------------------------------------------------------------------
#10 - lea1
	lea rdx, [rax + rax * 4]
;-------------------------------------------------------------------------------------------------------------------------------------------------
#11 - lea32
	lea edx, [eax + ebx * 8]
;-------------------------------------------------------------------------------------------------------------------------------------------------
#12 - egalite
	mov dx, 0
    cmp ax, bx
    jnz _not_equal
    mov dx, 1
_not_equal:
;-------------------------------------------------------------------------------------------------------------------------------------------------
#13 - Factorial
	mov ecx, 0
	mov ah, 0
	mov cx, ax
	mov eax, 1
	cmp cx, 0
	je L2
L1: 
	mul ecx
	loop L1
L2: 
	mov edx, eax
;-------------------------------------------------------------------------------------------------------------------------------------------------
#14 - Factorial64	
	mov rcx, 0
	mov ah, 0
	mov cx, ax
	mov rax, 1
	cmp cx, 0
	je L2
L1: 
	mul rcx
	loop L1
	
L2: 
	mov rdx, rax
;-------------------------------------------------------------------------------------------------------------------------------------------------
#15 - AntiFa
;	eax - факториал, ebx - результат
	
	mov ebx, eax
	mov ecx, 1
	mov eax, 1

L1:
	mul ecx
	inc ecx
	cmp eax, ebx
	jne L1

	dec ecx
	mov ebx, ecx

;-------------------------------------------------------------------------------------------------------------------------------------------------
#16 - AntiFa64

	mov rbx, rax
	mov rcx, 1
	mov rax, 1

L1:
	mul rcx
	inc rcx
	cmp rax, rbx
	jne L1

	dec rcx
	mov rbx, rcx

;-------------------------------------------------------------------------------------------------------------------------------------------------
#17 - vector
	mov ebx, 0
	mov edx, 0
	cmp ecx, 0
	je exit
L1:
	mov edx, dword ptr [eax]
	add ebx, edx
	mov edx, eax
	lea eax, [edx + 4]
	loop L1
exit:
